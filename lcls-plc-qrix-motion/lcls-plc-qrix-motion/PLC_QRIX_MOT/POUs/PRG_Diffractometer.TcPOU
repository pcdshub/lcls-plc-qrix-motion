<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_Diffractometer" Id="{47cc6d87-f16c-4ab2-afb0-97aaa2cfa842}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Diffractometer
VAR
    fb_Diff_Theta : FB_MotionStage;
    fb_Diff_2Theta : FB_MotionStage;
    fb_Diff_2ThetaY : FB_MotionStage;
    fb_Diff_Chi : FB_MotionStage;
    fb_Diff_Phi : FB_MotionStage;
    fb_Diff_X : FB_MotionStage;
    fb_Diff_Y : FB_MotionStage;
    fb_Diff_Z : FB_MotionStage;
    bInit : BOOl := TRUE;

    //EPS
    stEPS_Diff_Z : DUT_EPS;
    EPS_Diff_Z : FB_EPS;

    stEPS_Diff_Chi : DUT_EPS;
    EPS_Diff_Chi : FB_EPS;

    stEPS_Diff_Phi : DUT_EPS;
    EPS_Diff_Phi : FB_EPS;

    stEPS_Diff_Theta : DUT_EPS;
    EPS_Diff_Theta : FB_EPS;

    stEPS_Diff_2Theta : DUT_EPS;
    EPS_Diff_2Theta : FB_EPS;

    stEPS_Diff_2ThetaY : DUT_EPS;
    EPS_Diff_2ThetaY : FB_EPS;


    //Encoders for rotary stages
    fbSetPosition: MC_SetPosition;
    fb2ThetaAutoCoupling: FB_GantryAutoCoupling;
    couple : MC_GEARIN;
    decouple : MC_GEAROUT;
    bExecuteCouple: BOOL := TRUE;
    bExecuteDecouple: BOOL := FALSE;
    n2Theta AT %Q* :ULINT;
    r2Theta:LREAL;
    temp:ULINT;
    rtemp:LREAL;
    GantryDiff:REAL;

    fb_Diff_2Theta_Encoder : FB_MotionStage;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ( bInit) THEN
    bInit := FALSE;
    Main.M28.bHardwareEnable := TRUE;
    Main.M28.bPowerSelf := TRUE;
    Main.M28.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M28.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M29.bHardwareEnable := TRUE;
    Main.M29.bPowerSelf := TRUE;
    Main.M29.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M29.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M30.bHardwareEnable := TRUE;
    Main.M30.bPowerSelf := TRUE;
    Main.M30.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M30.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M31.bHardwareEnable := TRUE;
    Main.M31.bPowerSelf := TRUE;
    Main.M31.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M31.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M32.bHardwareEnable := TRUE;
    Main.M32.bPowerSelf := TRUE;
    Main.M32.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M32.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M33.bHardwareEnable := TRUE;
    Main.M33.bPowerSelf := TRUE;
    Main.M33.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M33.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M34.bHardwareEnable := TRUE;
    Main.M34.bPowerSelf := TRUE;
    Main.M34.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M34.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M35.bHardwareEnable := TRUE;
    Main.M35.bPowerSelf := TRUE;
    Main.M35.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M35.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    Main.M45.bHardwareEnable := TRUE;
    Main.M45.bPowerSelf := TRUE;
    Main.M45.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M45.nEnableMode := ENUM_StageEnableMode.ALWAYS;

    //Set 2Theta encoder value to the virtual axis 45 abosulte encoder value
    Main.M35.nHomingMode := ENUM_EpicsHomeCmd.ABSOLUTE_SET;
END_IF

IF (Main.M45.Axis.NcToPlc.ActPos >180) THEN
    Main.M35.fHomePosition := Main.M45.Axis.NcToPlc.ActPos - 360;
ELSE
    Main.M35.fHomePosition := Main.M45.Axis.NcToPlc.ActPos;
END_IF

// AutoCoupling
GantryDiff:= Main.M35.Axis.NcToPlc.ActPos - Main.M45.Axis.NcToPlc.ActPos;
IF (GantryDiff >0.5) THEN
    Main.M35.bHardwareEnable := FALSE;
END_IF
couple(Master:=Main.M35.Axis, Slave:=Main.M45.Axis, Execute:=bExecuteCouple);
decouple(Slave:=Main.M45.Axis, Execute:=NOT bExecuteCouple);

Main.M45.bLimitBackwardEnable := Main.M35.bLimitBackwardEnable ;
Main.M45.bLimitForwardEnable := Main.M35.bLimitForwardEnable ;
(*fb2ThetaAutoCoupling(	nGantryTol 			:= 200000, // 50nm/count
                Master				:= Main.M35,
              //  MasterEnc			:= stRenishawAbsEncMaster,
                Slave				:= Main.M45,
              //  SlaveEnc			:= stRenishawAbsEncSlave,
                bExecuteCouple 		:= bExecuteCouple,
                bExecuteDecouple 	:= bExecuteDecouple,
);*)




//EPS
(*
EPS_Diff_Z.setDescription('Less20mm;LAS_D_H'); // SET DESCRITION FOR BYTE INDICATOR LABELS
EPS_Diff_Z.setBit(nBits:= 0, bValue:=fb_Diff_Z.stMotionStage.fPosition>=-20);
EPS_Diff_Z.setBit(nBits:= 1, bValue:=PRG_LAS.fb_LAS_D_H.stMotionStage.fPosition>=50 OR PRG_Diffractometer.fb_Diff_Z.stMotionStage.fPosition>=-20);
EPS_Diff_Z(eps:=stEPS_Diff_Z);
fb_Diff_Z.stMotionStage.stEPSBackwardEnable := stEPS_Diff_Z;

EPS_Diff_Chi.setDescription('Less-5mm;Theta'); // SET DESCRITION FOR BYTE INDICATOR LABELS
EPS_Diff_Chi.setBit(nBits:= 0, bValue:=fb_Diff_Chi.stMotionStage.fPosition>-5);
EPS_Diff_Chi.setBit(nBits:= 1, bValue:=fb_Diff_Theta.stMotionStage.fPosition>5 OR PRG_Diffractometer.fb_Diff_Chi.stMotionStage.fPosition>-5);
EPS_Diff_Chi(eps:=stEPS_Diff_Chi);
fb_Diff_Chi.stMotionStage.stEPSBackwardEnable := stEPS_Diff_Chi;

EPS_Diff_Theta.setDescription('CHI;PHI;MIDIT'); // SET DESCRITION FOR BYTE INDICATOR LABELS
EPS_Diff_Theta.setBit(nBits:= 0, bValue:=fb_Diff_Theta.stMotionStage.fPosition>=5 OR PRG_Diffractometer.fb_Diff_Chi.stMotionStage.fPosition>-5);
EPS_Diff_Theta.setBit(nBits:= 1, bValue:=fb_Diff_Theta.stMotionStage.fPosition>10 OR (PRG_Diffractometer.fb_Diff_Phi.stMotionStage.fPosition <90.1 AND PRG_Diffractometer.fb_Diff_Phi.stMotionStage.fPosition>89.9)) ;
EPS_Diff_Theta.setBit(nBits:= 2, bValue:= fb_Diff_Theta.stMotionStage.fPosition>10 OR (PRG_LAS.fb_LAS_VIS.stMotionStage.fPosition <90.1 AND PRG_LAS.fb_LAS_VIS.stMotionStage.fPosition>89.9));
EPS_Diff_Theta(eps:=stEPS_Diff_Theta);
fb_Diff_Theta.stMotionStage.stEPSBackwardEnable := stEPS_Diff_Theta; //Need More


EPS_Diff_Phi.setDescription('Less-45;MID_IR;Theta'); // SET DESCRITION FOR BYTE INDICATOR LABELS
EPS_Diff_Phi.setBit(nBits:= 0, bValue:=fb_Diff_phi.stMotionStage.fPosition<=45);
EPS_Diff_Phi.setBit(nBits:= 1, bValue:=PRG_LAS.fb_LAS_VIS.stMotionStage.fPosition <45 OR PRG_Diffractometer.fb_Diff_phi.stMotionStage.fPosition<=45);
EPS_Diff_Phi.setBit(nBits:= 2, PRG_Diffractometer.fb_Diff_phi.stMotionStage.fPosition<=45 OR (PRG_Diffractometer.fb_Diff_Theta.stMotionStage.fPosition <0.1 AND PRG_Diffractometer.fb_Diff_Theta.stMotionStage.fPosition>359.5));
EPS_Diff_Phi(eps:=stEPS_Diff_Phi);
FB_Diff_Phi.stMotionStage.stEPSBackwardEnable := stEPS_Diff_Phi;
*)



fb_Diff_X(stMotionStage:=Main.M28);
fb_Diff_Y(stMotionStage:=Main.M29);
fb_Diff_Z(stMotionStage:=Main.M30);
fb_Diff_2ThetaY(stMotionStage:=Main.M31);
fb_Diff_Phi(stMotionStage:=Main.M32);
fb_Diff_Chi(stMotionStage:=Main.M33);
fb_Diff_Theta(stMotionStage:=Main.M34);
fb_Diff_2Theta(stMotionStage:=Main.M35);

//virtual axis for 2theta encoder
fb_Diff_2Theta_Encoder(stMotionStage:=Main.M45);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>